var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MetaPhylo","category":"page"},{"location":"#MetaPhylo","page":"Home","title":"MetaPhylo","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MetaPhylo.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MetaPhylo]","category":"page"},{"location":"#AbstractTrees.treebreadth-Tuple{MetaPhylo.AbstractPhyloTree}","page":"Home","title":"AbstractTrees.treebreadth","text":"AbstractTrees.treebreadth(tree::AbstractPhyloTree)\n\nReturn the number of leaves in the tree.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractTrees.treeheight-Tuple{MetaPhylo.AbstractPhyloTree}","page":"Home","title":"AbstractTrees.treeheight","text":"AbstractTrees.treeheight(tree::AbstractPhyloTree)\n\nReturn the maximum depth from the root to the leaves in the tree. See also treelength.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractTrees.treesize-Tuple{MetaPhylo.AbstractPhyloTree}","page":"Home","title":"AbstractTrees.treesize","text":"AbstractTrees.treesize(tree::AbstractPhyloTree)\n\nReturn the size og the tree.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.ancestors-Union{Tuple{Code}, Tuple{MetaPhylo.AbstractPhyloTree{Code}, Integer}} where Code","page":"Home","title":"MetaPhylo.ancestors","text":"ancestors(tree::AbstractPhyloTree, idx::Integer)\n\nReturn the indices of all ancestor nodes of the specified idx node.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.common_ancestor-Tuple{MetaPhylo.AbstractPhyloTree, Integer, Integer}","page":"Home","title":"MetaPhylo.common_ancestor","text":"common_ancestor(tree::AbstractPhyloTree, idx1::Integer, idx2::Integer)\n\nReturn the common ancestor index of two specified idx1 and idx2 nodes.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.distance-Tuple{MetaPhylo.AbstractPhyloTree, Integer, Integer}","page":"Home","title":"MetaPhylo.distance","text":"distance(tree::AbstractPhyloTree, idx1::Integer, idx2::Integer)\n\nReturn distance between two nodes on a tree.  The Tree branch types must have the Length trait.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.distance_matrix-Tuple{MetaPhylo.AbstractPhyloTree}","page":"Home","title":"MetaPhylo.distance_matrix","text":"distance_matrix(tree::AbstractPhyloTree)\n\nReturn pairwise distances between all leaves on the tree in a AxisArray. The Tree branch types must have the Length trait.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.isinternal-Tuple{MetaPhylo.AbstractPhyloTree, Graphs.SimpleGraphs.SimpleEdge}","page":"Home","title":"MetaPhylo.isinternal","text":"isinternal(tree::AbstractPhyloTree, idx::Integer)\n\nReturn true if the edge is both connected to internal nodes of the tree.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.isinternal-Tuple{MetaPhylo.AbstractPhyloTree, Integer}","page":"Home","title":"MetaPhylo.isinternal","text":"isinternal(tree::AbstractPhyloTree, idx::Integer)\n\nReturn true if the idx is contained in an internal node of the tree.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.isleaf-Tuple{MetaPhylo.AbstractPhyloTree, Graphs.SimpleGraphs.SimpleEdge}","page":"Home","title":"MetaPhylo.isleaf","text":"isleaf(tree::AbstractPhyloTree, edge::Edge)\n\nReturn true if the edge is connected to a leaf node of the tree.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.isleaf-Tuple{MetaPhylo.AbstractPhyloTree, Integer}","page":"Home","title":"MetaPhylo.isleaf","text":"isleaf(tree::AbstractPhyloTree, idx::Integer)\n\nReturn true if the idx is contained in a leaf node of the tree.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.ladderize!-Tuple{IndexNode{<:MetaPhylo.Tree, Int64}}","page":"Home","title":"MetaPhylo.ladderize!","text":"ladderize!(tree::Tree; left=false)\n\nLadderize the tree structure. By default, the smallest clade is on the right side; if left=true, on the left side.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.leafedges-Union{Tuple{Code}, Tuple{MetaPhylo.AbstractPhyloTree{Code}, Integer}} where Code","page":"Home","title":"MetaPhylo.leafedges","text":"leafedges(tree::AbstractPhyloTree, [idx::Integer])\n\nReturn the edges of all edges connected to the leaves in the tree. If the index is specified, this returns the edges connected to its leaves in the tree.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.leaves-Tuple{MetaPhylo.AbstractPhyloTree, Integer}","page":"Home","title":"MetaPhylo.leaves","text":"leaves(tree::AbstractPhyloTree, [idx::Integer])\n\nReturn the indices of all leaves in the tree. If the index is specified, this returns the indices of leaves in its subtree.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.parent_branch-Union{Tuple{Code}, Tuple{MetaPhylo.AbstractPhyloTree{Code}, Integer}} where Code","page":"Home","title":"MetaPhylo.parent_branch","text":"parent_branch(tree::AbstractPhyloTree, idx::Integer)\n\nReturn the baranch (edge) between the specified idx node and its parent node. If the node is root, this returns nothing \n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.reindex!-Union{Tuple{MetaPhylo.Tree{Code}}, Tuple{Code}} where Code","page":"Home","title":"MetaPhylo.reindex!","text":"reindex!(tree::Tree)\n\nReindex the tree in PreOderDFS order from the root. \n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.reroot!-Union{Tuple{MetaPhylo.Tree{Code, Root, MetaPhylo.NotReRootable}}, Tuple{Root}, Tuple{Code}} where {Code, Root}","page":"Home","title":"MetaPhylo.reroot!","text":"reroot!(tree::Tree, idx::Integer)\n\nReroot the tree at the specified node. Return true if rerooting success.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.swap!-Tuple{MetaPhylo.Tree, Integer, Pair{<:Integer, <:Integer}}","page":"Home","title":"MetaPhylo.swap!","text":"swap!(tree::Tree, idx::Integer, old_new::Pair{<:Integer, <:Integer})\n\nSwap the two child elements of the specified idx node. The old and new in old_new must be child of idx node. Return ture if swapping fails; true otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.swapchildren!-Tuple{MetaPhylo.Tree, Integer, Vector{<:Integer}}","page":"Home","title":"MetaPhylo.swapchildren!","text":"swapchildren!(tree::Tree, idx::Integer, newchildren)\n\nSwap the child indices of the specified idx node to the given newchildren. The elements of children and newchildren must be match. Return false if swapping fails; true otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#MetaPhylo.treelength-Tuple{MetaPhylo.AbstractPhyloTree}","page":"Home","title":"MetaPhylo.treelength","text":"treelength(tree::AbstractPhyloTree, [idx::Integer])\n\nReturn maximum distance from the root to the leaves in the tree. If the index is specified, this returns maximum distance from the specified idx to its leaves in the tree. The Tree branch types must have the Length trait. See also treeheight.\n\n\n\n\n\n","category":"method"}]
}
